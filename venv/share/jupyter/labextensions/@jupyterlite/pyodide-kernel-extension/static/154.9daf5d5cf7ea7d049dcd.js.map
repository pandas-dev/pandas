{"version":3,"file":"154.9daf5d5cf7ea7d049dcd.js?v=9daf5d5cf7ea7d049dcd","mappings":"sTAQA,MAAMA,EAAkB,6BAA6BC,K,4iCAQ/CC,EAAY,+CAsGlB,EADgB,CAjGD,CACXC,GAAID,EACJE,YAAa,yCACbC,WAAW,EACXC,SAAU,CAAC,EAAAC,cACXC,SAAU,CAAC,EAAAC,sBAAuB,EAAAC,iBAClCC,SAAU,CAACC,EAAKC,EAAaC,EAAsBC,KAC/C,MAAQC,SAAUC,EAAe,SAAEC,GAAaN,EAAIO,eAC9CC,EAASC,KAAKC,MAAM,EAAAC,WAAWC,UAAU,uBAAyB,MAAMtB,IAAc,CAAC,EACvFuB,EAAU,EAAAF,WAAWG,aACrBC,EAAMP,EAAOQ,YAlBH,2DAmBVA,EAAa,EAAAC,OAAOP,MAAMK,GAAKG,KAC/BC,EAAkBX,EAAOW,gBACzB,EAAAF,OAAOP,MAAMF,EAAOW,iBAAiBD,UACrCE,EAEAC,GADab,EAAOa,aAAe,IACVC,KAAKC,GAAW,EAAAN,OAAOP,MAAMa,GAAQL,OAC9DM,IAAwBhB,EAAOgB,oBAC/BC,EAAqBjB,EAAOiB,oBAAsB,CAAC,EACzD,IAAK,MAAOC,EAAKC,KAAUC,OAAOC,QAAQJ,GAClCC,EAAII,SAAS,QAA2B,iBAAVH,IAC9BF,EAAmBC,GAAO,IAAIK,IAAIJ,EAAOd,GAASK,MAK1D,MAAMc,EAASC,MAAOC,IAClB,IAAIC,EACJ,IAAKhC,EAED,OAEJ,MAAM,QAAEiC,EAAO,SAAEC,GAAaH,EAE9B,IAAII,EAAc,GAClB,IAAK,MAAMC,KAAWjC,EAASkC,UAC3B,IAA+B,QAAzBL,EAAKI,EAAQE,cAA2B,IAAPN,OAAgB,EAASA,EAAG5C,MAAQ8C,EAAU,CACjFC,EAAcC,EAAQG,KACtB,KACJ,CAEWvC,EAAewC,UAAUL,GACjCM,IAAIR,EAAQ,EAEvBnC,EAAY4C,SAAS,CACjBC,KAAM,CACFC,KAAM,SACNC,aAAc,mBACdC,SAAU,SACVC,KAAM,GACNC,UAAW,CACP,aAAc/D,EACd,aAAcA,IAGtBgE,OAAQnB,MAAOC,IACX,MAAM,cAAEmB,SAAwB,kCAC1BC,MAAiBpD,aAAmE,EAASA,EAAqBqD,WAAYC,qBAC9Hf,EAAS,IAAIY,EAAc,IAC1BnB,EACHlB,aACAG,kBACAE,cACAG,sBACA8B,aACA7B,qBACApB,kBACAoD,kBAAmBvD,aAAmE,EAASA,EAAqBuD,kBACpHzB,WAEJ,GAAIsB,EACAI,QAAQC,KAAK,6DAEZ,CACD,MAAMC,EAAiB,gNAGvBF,QAAQG,KAAKD,GAEbnB,EAAOqB,MAAMC,MAAK,KACV5D,GACK6B,EAAO,CACRI,QAAS,CACL4B,KAAM,OACNC,KAAML,EACNM,MAAO,WAEX7B,SAAUH,EAAQ3C,IAE1B,GAER,CACA,OAAOkD,CAAM,GAEnB,G","sources":["webpack://@jupyterlite/pyodide-kernel-extension/./lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { PageConfig, URLExt } from '@jupyterlab/coreutils';\nimport { ILoggerRegistry } from '@jupyterlab/logconsole';\nimport { IServiceWorkerManager } from '@jupyterlite/server';\nimport { IKernelSpecs } from '@jupyterlite/kernel';\nimport KERNEL_ICON_SVG_STR from '../style/img/pyodide.svg';\nexport * as KERNEL_SETTINGS_SCHEMA from '../schema/kernel.v0.schema.json';\nconst KERNEL_ICON_URL = `data:image/svg+xml;base64,${btoa(KERNEL_ICON_SVG_STR)}`;\n/**\n * The default CDN fallback for Pyodide\n */\nconst PYODIDE_CDN_URL = 'https://cdn.jsdelivr.net/pyodide/v0.27.6/full/pyodide.js';\n/**\n * The id for the extension, and key in the litePlugins.\n */\nconst PLUGIN_ID = '@jupyterlite/pyodide-kernel-extension:kernel';\n/**\n * A plugin to register the Pyodide kernel.\n */\nconst kernel = {\n    id: PLUGIN_ID,\n    description: 'A plugin providing the Pyodide kernel.',\n    autoStart: true,\n    requires: [IKernelSpecs],\n    optional: [IServiceWorkerManager, ILoggerRegistry],\n    activate: (app, kernelspecs, serviceWorkerManager, loggerRegistry) => {\n        const { contents: contentsManager, sessions } = app.serviceManager;\n        const config = JSON.parse(PageConfig.getOption('litePluginSettings') || '{}')[PLUGIN_ID] || {};\n        const baseUrl = PageConfig.getBaseUrl();\n        const url = config.pyodideUrl || PYODIDE_CDN_URL;\n        const pyodideUrl = URLExt.parse(url).href;\n        const pipliteWheelUrl = config.pipliteWheelUrl\n            ? URLExt.parse(config.pipliteWheelUrl).href\n            : undefined;\n        const rawPipUrls = config.pipliteUrls || [];\n        const pipliteUrls = rawPipUrls.map((pipUrl) => URLExt.parse(pipUrl).href);\n        const disablePyPIFallback = !!config.disablePyPIFallback;\n        const loadPyodideOptions = config.loadPyodideOptions || {};\n        for (const [key, value] of Object.entries(loadPyodideOptions)) {\n            if (key.endsWith('URL') && typeof value === 'string') {\n                loadPyodideOptions[key] = new URL(value, baseUrl).href;\n            }\n        }\n        // The logger will find the notebook associated with the kernel id\n        // and log the payload to the log console for that notebook.\n        const logger = async (options) => {\n            var _a;\n            if (!loggerRegistry) {\n                // nothing to do in this case\n                return;\n            }\n            const { payload, kernelId } = options;\n            // Find the session path that corresponds to the kernel ID\n            let sessionPath = '';\n            for (const session of sessions.running()) {\n                if (((_a = session.kernel) === null || _a === void 0 ? void 0 : _a.id) === kernelId) {\n                    sessionPath = session.path;\n                    break;\n                }\n            }\n            const logger = loggerRegistry.getLogger(sessionPath);\n            logger.log(payload);\n        };\n        kernelspecs.register({\n            spec: {\n                name: 'python',\n                display_name: 'Python (Pyodide)',\n                language: 'python',\n                argv: [],\n                resources: {\n                    'logo-32x32': KERNEL_ICON_URL,\n                    'logo-64x64': KERNEL_ICON_URL,\n                },\n            },\n            create: async (options) => {\n                const { PyodideKernel } = await import('@jupyterlite/pyodide-kernel');\n                const mountDrive = !!((serviceWorkerManager === null || serviceWorkerManager === void 0 ? void 0 : serviceWorkerManager.enabled) || crossOriginIsolated);\n                const kernel = new PyodideKernel({\n                    ...options,\n                    pyodideUrl,\n                    pipliteWheelUrl,\n                    pipliteUrls,\n                    disablePyPIFallback,\n                    mountDrive,\n                    loadPyodideOptions,\n                    contentsManager,\n                    browsingContextId: serviceWorkerManager === null || serviceWorkerManager === void 0 ? void 0 : serviceWorkerManager.browsingContextId,\n                    logger,\n                });\n                if (mountDrive) {\n                    console.info('Pyodide contents will be synced with Jupyter Contents');\n                }\n                else {\n                    const warningMessage = 'Pyodide contents will NOT be synced with Jupyter Contents. ' +\n                        'For full functionality, try using a regular browser tab instead of private/incognito mode, ' +\n                        'especially in Firefox where this is a known limitation.';\n                    console.warn(warningMessage);\n                    // Wait for kernel to be ready before logging the warning\n                    kernel.ready.then(() => {\n                        if (loggerRegistry) {\n                            void logger({\n                                payload: {\n                                    type: 'text',\n                                    data: warningMessage,\n                                    level: 'warning',\n                                },\n                                kernelId: options.id,\n                            });\n                        }\n                    });\n                }\n                return kernel;\n            },\n        });\n    },\n};\nconst plugins = [kernel];\nexport default plugins;\n"],"names":["KERNEL_ICON_URL","btoa","PLUGIN_ID","id","description","autoStart","requires","IKernelSpecs","optional","IServiceWorkerManager","ILoggerRegistry","activate","app","kernelspecs","serviceWorkerManager","loggerRegistry","contents","contentsManager","sessions","serviceManager","config","JSON","parse","PageConfig","getOption","baseUrl","getBaseUrl","url","pyodideUrl","URLExt","href","pipliteWheelUrl","undefined","pipliteUrls","map","pipUrl","disablePyPIFallback","loadPyodideOptions","key","value","Object","entries","endsWith","URL","logger","async","options","_a","payload","kernelId","sessionPath","session","running","kernel","path","getLogger","log","register","spec","name","display_name","language","argv","resources","create","PyodideKernel","mountDrive","enabled","crossOriginIsolated","browsingContextId","console","info","warningMessage","warn","ready","then","type","data","level"],"sourceRoot":""}