// qopenglpaintdevice.sip generated by MetaSIP
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2024 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt5.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (PyQt_OpenGL)

class QOpenGLPaintDevice : public QPaintDevice
{
%TypeHeaderCode
#include <qopenglpaintdevice.h>
%End

public:
    QOpenGLPaintDevice();
    explicit QOpenGLPaintDevice(const QSize &size);
    QOpenGLPaintDevice(int width, int height);
    virtual ~QOpenGLPaintDevice();
    virtual QPaintEngine *paintEngine() const;
    QOpenGLContext *context() const;
    QSize size() const;
    void setSize(const QSize &size);
    qreal dotsPerMeterX() const;
    qreal dotsPerMeterY() const;
    void setDotsPerMeterX(qreal);
    void setDotsPerMeterY(qreal);
    void setPaintFlipped(bool flipped);
    bool paintFlipped() const;
    virtual void ensureActiveTarget();
%If (Qt_5_1_0 -)
    void setDevicePixelRatio(qreal devicePixelRatio);
%End

protected:
    virtual int metric(QPaintDevice::PaintDeviceMetric metric) const;

private:
%If (- Qt_5_1_0)
    QOpenGLPaintDevice(const QOpenGLPaintDevice &);
%End
};

%End
