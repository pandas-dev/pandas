// qdbuspendingcall.sip generated by MetaSIP
//
// This file is part of the QtDBus Python extension module.
//
// Copyright (c) 2024 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt5.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QDBusPendingCall
{
%TypeHeaderCode
#include <qdbuspendingcall.h>
%End

public:
    QDBusPendingCall(const QDBusPendingCall &other);
    ~QDBusPendingCall();
    static QDBusPendingCall fromError(const QDBusError &error);
    static QDBusPendingCall fromCompletedCall(const QDBusMessage &message);
    void swap(QDBusPendingCall &other /Constrained/);

private:
    QDBusPendingCall();
};

class QDBusPendingCallWatcher : public QObject, public QDBusPendingCall
{
%TypeHeaderCode
#include <qdbuspendingcall.h>
%End

public:
    QDBusPendingCallWatcher(const QDBusPendingCall &call, QObject *parent /TransferThis/ = 0);
    virtual ~QDBusPendingCallWatcher();
    bool isFinished() const;
    void waitForFinished() /ReleaseGIL/;

signals:
%If (- Qt_5_6_0)
    void finished(QDBusPendingCallWatcher *watcher);
%End
%If (Qt_5_6_0 -)
    void finished(QDBusPendingCallWatcher *watcher = 0);
%End
};
