// qfilesystemmodel.sip generated by MetaSIP
//
// This file is part of the QtWidgets Python extension module.
//
// Copyright (c) 2024 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt5.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QFileSystemModel : public QAbstractItemModel
{
%TypeHeaderCode
#include <qfilesystemmodel.h>
%End

public:
    enum Roles
    {
        FileIconRole,
        FilePathRole,
        FileNameRole,
        FilePermissions,
    };

    explicit QFileSystemModel(QObject *parent /TransferThis/ = 0);
    virtual ~QFileSystemModel();
    virtual QModelIndex index(int row, int column, const QModelIndex &parent = QModelIndex()) const;
    QModelIndex index(const QString &path, int column = 0) const;
    virtual QModelIndex parent(const QModelIndex &child) const;
    virtual bool hasChildren(const QModelIndex &parent = QModelIndex()) const;
    virtual bool canFetchMore(const QModelIndex &parent) const;
    virtual void fetchMore(const QModelIndex &parent);
    virtual int rowCount(const QModelIndex &parent = QModelIndex()) const;
    virtual int columnCount(const QModelIndex &parent = QModelIndex()) const;
    QVariant myComputer(int role = Qt::ItemDataRole::DisplayRole) const;
    virtual QVariant data(const QModelIndex &index, int role = Qt::ItemDataRole::DisplayRole) const;
    virtual bool setData(const QModelIndex &index, const QVariant &value, int role = Qt::ItemDataRole::EditRole);
    virtual QVariant headerData(int section, Qt::Orientation orientation, int role = Qt::ItemDataRole::DisplayRole) const;
    virtual Qt::ItemFlags flags(const QModelIndex &index) const;
    virtual void sort(int column, Qt::SortOrder order = Qt::AscendingOrder);
    virtual QStringList mimeTypes() const;
    virtual QMimeData *mimeData(const QModelIndexList &indexes) const;
    virtual bool dropMimeData(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &parent);
    virtual Qt::DropActions supportedDropActions() const;
    QModelIndex setRootPath(const QString &path);
    QString rootPath() const;
    QDir rootDirectory() const;
    void setIconProvider(QFileIconProvider *provider /KeepReference/);
    QFileIconProvider *iconProvider() const;
    void setFilter(QDir::Filters filters);
    QDir::Filters filter() const;
    void setResolveSymlinks(bool enable);
    bool resolveSymlinks() const;
    void setReadOnly(bool enable);
    bool isReadOnly() const;
    void setNameFilterDisables(bool enable);
    bool nameFilterDisables() const;
    void setNameFilters(const QStringList &filters);
    QStringList nameFilters() const;
    QString filePath(const QModelIndex &index) const;
    bool isDir(const QModelIndex &index) const;
    qint64 size(const QModelIndex &index) const;
    QString type(const QModelIndex &index) const;
    QDateTime lastModified(const QModelIndex &index) const;
    QModelIndex mkdir(const QModelIndex &parent, const QString &name);
    QFileDevice::Permissions permissions(const QModelIndex &index) const;
    bool rmdir(const QModelIndex &index);
    QString fileName(const QModelIndex &aindex) const;
    QIcon fileIcon(const QModelIndex &aindex) const;
    QFileInfo fileInfo(const QModelIndex &aindex) const;
    bool remove(const QModelIndex &index);

signals:
    void fileRenamed(const QString &path, const QString &oldName, const QString &newName);
    void rootPathChanged(const QString &newPath);
    void directoryLoaded(const QString &path);

protected:
    virtual bool event(QEvent *event);
    virtual void timerEvent(QTimerEvent *event);

public:
%If (Qt_5_7_0 -)
    virtual QModelIndex sibling(int row, int column, const QModelIndex &idx) const;
%End
%If (Qt_5_14_0 -)

    enum Option
    {
        DontWatchForChanges,
        DontResolveSymlinks,
        DontUseCustomDirectoryIcons,
    };

%End
%If (Qt_5_14_0 -)
    typedef QFlags<QFileSystemModel::Option> Options;
%End
%If (Qt_5_14_0 -)
    void setOption(QFileSystemModel::Option option, bool on = true);
%End
%If (Qt_5_14_0 -)
    bool testOption(QFileSystemModel::Option option) const;
%End
%If (Qt_5_14_0 -)
    void setOptions(QFileSystemModel::Options options);
%End
%If (Qt_5_14_0 -)
    QFileSystemModel::Options options() const;
%End
};

%If (Qt_5_14_0 -)
QFlags<QFileSystemModel::Option> operator|(QFileSystemModel::Option f1, QFlags<QFileSystemModel::Option> f2);
%End
