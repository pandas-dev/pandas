// qcommandlineparser.sip generated by MetaSIP
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2024 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt5.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_5_2_0 -)

class QCommandLineParser
{
%TypeHeaderCode
#include <qcommandlineparser.h>
%End

public:
    QCommandLineParser();
    ~QCommandLineParser();

    enum SingleDashWordOptionMode
    {
        ParseAsCompactedShortOptions,
        ParseAsLongOptions,
    };

    void setSingleDashWordOptionMode(QCommandLineParser::SingleDashWordOptionMode parsingMode);
    bool addOption(const QCommandLineOption &commandLineOption);
    QCommandLineOption addVersionOption();
    QCommandLineOption addHelpOption();
    void setApplicationDescription(const QString &description);
    QString applicationDescription() const;
    void addPositionalArgument(const QString &name, const QString &description, const QString &syntax = QString());
    void clearPositionalArguments();
    void process(const QStringList &arguments) /ReleaseGIL/;
    void process(const QCoreApplication &app) /ReleaseGIL/;
    bool parse(const QStringList &arguments);
    QString errorText() const;
    bool isSet(const QString &name) const;
    QString value(const QString &name) const;
    QStringList values(const QString &name) const;
    bool isSet(const QCommandLineOption &option) const;
    QString value(const QCommandLineOption &option) const;
    QStringList values(const QCommandLineOption &option) const;
    QStringList positionalArguments() const;
    QStringList optionNames() const;
    QStringList unknownOptionNames() const;
    void showHelp(int exitCode = 0) /ReleaseGIL/;
    QString helpText() const;
%If (Qt_5_4_0 -)
    bool addOptions(const QList<QCommandLineOption> &options);
%End
%If (Qt_5_4_0 -)
    void showVersion();
%End
%If (Qt_5_6_0 -)

    enum OptionsAfterPositionalArgumentsMode
    {
        ParseAsOptions,
        ParseAsPositionalArguments,
    };

%End
%If (Qt_5_6_0 -)
    void setOptionsAfterPositionalArgumentsMode(QCommandLineParser::OptionsAfterPositionalArgumentsMode mode);
%End

private:
    QCommandLineParser(const QCommandLineParser &);
};

%End
