// qwaitcondition.sip generated by MetaSIP
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2024 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt5.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QWaitCondition
{
%TypeHeaderCode
#include <qwaitcondition.h>
%End

public:
    QWaitCondition();
    ~QWaitCondition();
    bool wait(QMutex *mutex, unsigned long msecs = ULONG_MAX) /ReleaseGIL/;
%If (Qt_5_12_0 -)
    bool wait(QMutex *lockedMutex, QDeadlineTimer deadline) /ReleaseGIL/;
%End
    bool wait(QReadWriteLock *readWriteLock, unsigned long msecs = ULONG_MAX) /ReleaseGIL/;
%If (Qt_5_12_0 -)
    bool wait(QReadWriteLock *lockedReadWriteLock, QDeadlineTimer deadline) /ReleaseGIL/;
%End
    void wakeOne();
    void wakeAll();

private:
    QWaitCondition(const QWaitCondition &);
};
