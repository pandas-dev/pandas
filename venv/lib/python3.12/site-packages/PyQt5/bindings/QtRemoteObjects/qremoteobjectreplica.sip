// qremoteobjectreplica.sip generated by MetaSIP
//
// This file is part of the QtRemoteObjects Python extension module.
//
// Copyright (c) 2024 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt5.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_5_12_0 -)

class QRemoteObjectReplica : public QObject /NoDefaultCtors/
{
%TypeHeaderCode
#include <qremoteobjectreplica.h>
%End

public:
    enum State
    {
        Uninitialized,
        Default,
        Valid,
        Suspect,
        SignatureMismatch,
    };

    virtual ~QRemoteObjectReplica();
    bool isReplicaValid() const;
    bool waitForSource(int timeout = 30000) /ReleaseGIL/;
    bool isInitialized() const;
    QRemoteObjectReplica::State state() const;
    QRemoteObjectNode *node() const;
    virtual void setNode(QRemoteObjectNode *node);

signals:
    void initialized();
    void stateChanged(QRemoteObjectReplica::State state, QRemoteObjectReplica::State oldState);
%If (Qt_5_15_0 -)
    void notified();
%End
};

%End
