// qwebchannel.sip generated by MetaSIP
//
// This file is part of the QtWebChannel Python extension module.
//
// Copyright (c) 2024 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt5.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_5_4_0 -)

class QWebChannel : public QObject
{
%TypeHeaderCode
#include <qwebchannel.h>
%End

%ConvertToSubClassCode
    static struct class_graph {
        const char *name;
        sipTypeDef **type;
        int yes, no;
    } graph[] = {
        {sipName_QWebChannelAbstractTransport, &sipType_QWebChannelAbstractTransport, -1, 1},
        {sipName_QWebChannel, &sipType_QWebChannel, -1, -1},
    };
    
    int i = 0;
    
    sipType = NULL;
    
    do
    {
        struct class_graph *cg = &graph[i];
    
        if (cg->name != NULL && sipCpp->inherits(cg->name))
        {
            sipType = *cg->type;
            i = cg->yes;
        }
        else
            i = cg->no;
    }
    while (i >= 0);
%End

public:
    explicit QWebChannel(QObject *parent /TransferThis/ = 0);
    virtual ~QWebChannel();
    void registerObjects(const QHash<QString, QObject *> &objects);
    QHash<QString, QObject *> registeredObjects() const;
    void registerObject(const QString &id, QObject *object);
    void deregisterObject(QObject *object);
    bool blockUpdates() const;
    void setBlockUpdates(bool block);

signals:
    void blockUpdatesChanged(bool block);

public slots:
    void connectTo(QWebChannelAbstractTransport *transport);
    void disconnectFrom(QWebChannelAbstractTransport *transport);

private:
    QWebChannel(const QWebChannel &);
};

%End
