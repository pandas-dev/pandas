// qplacesearchrequest.sip generated by MetaSIP
//
// This file is part of the QtLocation Python extension module.
//
// Copyright (c) 2024 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt5.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_5_5_0 -)

class QPlaceSearchRequest
{
%TypeHeaderCode
#include <qplacesearchrequest.h>
%End

public:
    enum RelevanceHint
    {
        UnspecifiedHint,
        DistanceHint,
        LexicalPlaceNameHint,
    };

    QPlaceSearchRequest();
    QPlaceSearchRequest(const QPlaceSearchRequest &other);
    ~QPlaceSearchRequest();
    bool operator==(const QPlaceSearchRequest &other) const;
    bool operator!=(const QPlaceSearchRequest &other) const;
    QString searchTerm() const;
    void setSearchTerm(const QString &term);
    QList<QPlaceCategory> categories() const;
    void setCategory(const QPlaceCategory &category);
    void setCategories(const QList<QPlaceCategory> &categories);
    QGeoShape searchArea() const;
    void setSearchArea(const QGeoShape &area);
    QString recommendationId() const;
    void setRecommendationId(const QString &recommendationId);
    QVariant searchContext() const;
    void setSearchContext(const QVariant &context);
    QLocation::VisibilityScope visibilityScope() const;
    void setVisibilityScope(QLocation::VisibilityScope visibilityScopes);
    QPlaceSearchRequest::RelevanceHint relevanceHint() const;
    void setRelevanceHint(QPlaceSearchRequest::RelevanceHint hint);
    int limit() const;
    void setLimit(int limit);
    void clear();
};

%End
