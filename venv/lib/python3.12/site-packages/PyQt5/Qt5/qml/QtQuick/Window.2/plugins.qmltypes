import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    dependencies: ["QtQuick 2.0"]
    Component {
        file: "plugin.h"
        name: "QQuickRootItem"
        defaultProperty: "data"
        prototype: "QQuickItem"
        Method {
            name: "setWidth"
            Parameter { name: "w"; type: "int" }
        }
        Method {
            name: "setHeight"
            Parameter { name: "h"; type: "int" }
        }
    }
    Component {
        file: "plugin.h"
        name: "QQuickScreen"
        exports: [
            "QtQuick.Window/Screen 2.0",
            "QtQuick.Window/Screen 2.10",
            "QtQuick.Window/Screen 2.3"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [0, 10, 3]
        attachedType: "QQuickScreenAttached"
    }
    Component {
        file: "plugin.h"
        name: "QQuickScreenAttached"
        prototype: "QQuickScreenInfo"
        Property { name: "orientationUpdateMask"; type: "Qt::ScreenOrientations" }
        Method {
            name: "screenChanged"
            Parameter { type: "QScreen"; isPointer: true }
        }
        Method {
            name: "angleBetween"
            type: "int"
            Parameter { name: "a"; type: "int" }
            Parameter { name: "b"; type: "int" }
        }
    }
    Component {
        file: "plugin.h"
        name: "QQuickScreenInfo"
        exports: [
            "QtQuick.Window/ScreenInfo 2.10",
            "QtQuick.Window/ScreenInfo 2.3"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [10, 3]
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "manufacturer"; revision: 10; type: "string"; isReadonly: true }
        Property { name: "model"; revision: 10; type: "string"; isReadonly: true }
        Property { name: "serialNumber"; revision: 10; type: "string"; isReadonly: true }
        Property { name: "width"; type: "int"; isReadonly: true }
        Property { name: "height"; type: "int"; isReadonly: true }
        Property { name: "desktopAvailableWidth"; type: "int"; isReadonly: true }
        Property { name: "desktopAvailableHeight"; type: "int"; isReadonly: true }
        Property { name: "logicalPixelDensity"; type: "double"; isReadonly: true }
        Property { name: "pixelDensity"; type: "double"; isReadonly: true }
        Property { name: "devicePixelRatio"; type: "double"; isReadonly: true }
        Property { name: "primaryOrientation"; type: "Qt::ScreenOrientation"; isReadonly: true }
        Property { name: "orientation"; type: "Qt::ScreenOrientation"; isReadonly: true }
        Property { name: "virtualX"; revision: 3; type: "int"; isReadonly: true }
        Property { name: "virtualY"; revision: 3; type: "int"; isReadonly: true }
        Signal { name: "manufacturerChanged"; revision: 10 }
        Signal { name: "modelChanged"; revision: 10 }
        Signal { name: "serialNumberChanged"; revision: 10 }
        Signal { name: "desktopGeometryChanged" }
        Signal { name: "virtualXChanged"; revision: 3 }
        Signal { name: "virtualYChanged"; revision: 3 }
    }
    Component {
        file: "plugin.h"
        name: "QQuickWindow"
        defaultProperty: "data"
        exports: ["QtQuick.Window/Window 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "CreateTextureOptions"
            alias: "CreateTextureOption"
            isFlag: true
            values: [
                "TextureHasAlphaChannel",
                "TextureHasMipmaps",
                "TextureOwnsGLTexture",
                "TextureCanUseAtlas",
                "TextureIsOpaque"
            ]
        }
        Enum {
            name: "SceneGraphError"
            values: ["ContextNotAvailable"]
        }
        Enum {
            name: "TextRenderType"
            values: ["QtTextRendering", "NativeTextRendering"]
        }
        Enum {
            name: "NativeObjectType"
            values: ["NativeObjectTexture"]
        }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "color"; type: "QColor" }
        Property { name: "contentItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property {
            name: "activeFocusItem"
            revision: 1
            type: "QQuickItem"
            isReadonly: true
            isPointer: true
        }
        Signal { name: "frameSwapped" }
        Signal {
            name: "openglContextCreated"
            revision: 2
            Parameter { name: "context"; type: "QOpenGLContext"; isPointer: true }
        }
        Signal { name: "sceneGraphInitialized" }
        Signal { name: "sceneGraphInvalidated" }
        Signal { name: "beforeSynchronizing" }
        Signal { name: "afterSynchronizing"; revision: 2 }
        Signal { name: "beforeRendering" }
        Signal { name: "afterRendering" }
        Signal { name: "afterAnimating"; revision: 2 }
        Signal { name: "sceneGraphAboutToStop"; revision: 2 }
        Signal {
            name: "closing"
            revision: 1
            Parameter { name: "close"; type: "QQuickCloseEvent"; isPointer: true }
        }
        Signal {
            name: "colorChanged"
            Parameter { type: "QColor" }
        }
        Signal { name: "activeFocusItemChanged"; revision: 1 }
        Signal {
            name: "sceneGraphError"
            revision: 2
            Parameter { name: "error"; type: "QQuickWindow::SceneGraphError" }
            Parameter { name: "message"; type: "string" }
        }
        Signal { name: "beforeRenderPassRecording"; revision: 14 }
        Signal { name: "afterRenderPassRecording"; revision: 14 }
        Method { name: "update" }
        Method { name: "releaseResources" }
        Method { name: "maybeUpdate" }
        Method { name: "cleanupSceneGraph" }
        Method { name: "physicalDpiChanged" }
        Method {
            name: "handleScreenChanged"
            Parameter { name: "screen"; type: "QScreen"; isPointer: true }
        }
        Method {
            name: "setTransientParent_helper"
            Parameter { name: "window"; type: "QQuickWindow"; isPointer: true }
        }
        Method { name: "runJobsAfterSwap" }
        Method {
            name: "handleApplicationStateChanged"
            Parameter { name: "state"; type: "Qt::ApplicationState" }
        }
    }
    Component {
        file: "plugin.h"
        name: "QQuickWindowAttached"
        Property { name: "visibility"; type: "QWindow::Visibility"; isReadonly: true }
        Property { name: "active"; type: "bool"; isReadonly: true }
        Property { name: "activeFocusItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "contentItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "width"; type: "int"; isReadonly: true }
        Property { name: "height"; type: "int"; isReadonly: true }
        Property { name: "window"; type: "QQuickWindow"; isReadonly: true; isPointer: true }
        Method {
            name: "windowChange"
            Parameter { type: "QQuickWindow"; isPointer: true }
        }
    }
    Component {
        file: "plugin.h"
        name: "QQuickWindowQmlImpl"
        defaultProperty: "data"
        prototype: "QQuickWindow"
        exports: [
            "QtQuick.Window/Window 2.1",
            "QtQuick.Window/Window 2.14",
            "QtQuick.Window/Window 2.2",
            "QtQuick.Window/Window 2.3"
        ]
        exportMetaObjectRevisions: [1, 14, 2, 3]
        attachedType: "QQuickWindowAttached"
        Property { name: "visible"; type: "bool" }
        Property { name: "visibility"; type: "Visibility" }
        Property { name: "screen"; revision: 3; type: "QObject"; isPointer: true }
        Signal {
            name: "visibleChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "visibilityChanged"
            Parameter { name: "visibility"; type: "QWindow::Visibility" }
        }
        Signal { name: "screenChanged"; revision: 3 }
        Method { name: "setWindowVisibility" }
    }
    Component { file: "plugin.h"; name: "QWindowForeign" }
}
