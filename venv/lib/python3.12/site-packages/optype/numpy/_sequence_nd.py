from collections.abc import Iterator
from typing import Any, Protocol, TypeVar, final

__all__ = ["SequenceND"]


T_co = TypeVar("T_co", covariant=True)


@final
class SequenceND(Protocol[T_co]):  # type: ignore[misc]  # https://github.com/python/mypy/issues/17288
    """Based on `numpy._typing._NestedSequence`."""

    def __len__(self, /) -> int: ...
    def __contains__(self, value: object, /) -> bool: ...
    def __getitem__(self, index: int, /) -> "T_co | SequenceND[T_co]": ...
    def __iter__(self, /) -> Iterator["T_co | SequenceND[T_co]"]: ...
    def __reversed__(self, /) -> Iterator["T_co | SequenceND[T_co]"]: ...
    def count(self, value: Any, /) -> int: ...
    def index(self, value: Any, /) -> int: ...
