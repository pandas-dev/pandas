from typing import Self

import optype.numpy as onp

class CensoredData:
    def __init__(
        self,
        /,
        uncensored: onp.ToComplex1D | None = None,
        *,
        left: onp.ToComplex1D | None = None,
        right: onp.ToComplex1D | None = None,
        interval: onp.ToFloat2D | None = None,
    ) -> None: ...
    def __sub__(self, other: object, /) -> CensoredData: ...
    def __truediv__(self, other: object, /) -> CensoredData: ...
    def __len__(self, /) -> int: ...
    def num_censored(self, /) -> int: ...
    @classmethod
    def right_censored(cls, x: onp.ToComplex1D, censored: onp.ToBool1D) -> Self: ...
    @classmethod
    def left_censored(cls, x: onp.ToComplex1D, censored: onp.ToBool1D) -> Self: ...
    @classmethod
    def interval_censored(cls, low: onp.ToComplex1D, high: onp.ToComplex1D) -> Self: ...
