from types import ModuleType
from typing import Any, TypeVar

import numpy as np
import optype.numpy as onp
import optype.numpy.compat as npc

_InexactT = TypeVar("_InexactT", bound=npc.inexact)

###

def _sort_cmplx(arr: onp.ArrayND[_InexactT], xp: ModuleType) -> onp.ArrayND[_InexactT]: ...
def polyroots(coef: onp.ArrayND[_InexactT], *, xp: ModuleType) -> onp.ArrayND[_InexactT]: ...
def _trim_zeros(filt: onp.Array1D[_InexactT], trim: str = "fb") -> onp.Array1D[_InexactT]: ...
def _poly1d(c_or_r: onp.Array1D[_InexactT], *, xp: ModuleType) -> onp.Array1D[_InexactT]: ...
def polyval(p: onp.ArrayND[npc.number], x: onp.ArrayND[_InexactT], *, xp: ModuleType) -> onp.ArrayND[_InexactT]: ...
def poly(seq_of_zeros: onp.ToComplex1D, *, xp: ModuleType) -> onp.ArrayND[np.float64 | Any]: ...
def polymul(a1: onp.ArrayND[_InexactT], a2: onp.ArrayND[_InexactT], *, xp: ModuleType) -> onp.ArrayND[_InexactT]: ...
def npp_polyval(
    x: onp.ToComplex | onp.ToComplexND, c: onp.ArrayND[npc.number], *, xp: ModuleType, tensor: bool = True
) -> onp.ArrayND[np.float64 | Any]: ...
def npp_polyvalfromroots(
    x: onp.ToComplex | onp.ToComplexND, r: onp.ArrayND[npc.number], *, xp: ModuleType, tensor: bool = True
) -> onp.ArrayND[np.float64 | Any]: ...
